    1. Получение с github

Что-бы скопировать на свой компьютер репозиторий из github.com- предварительно должен быть установлен github и gitbash, через который будут вызываться разного рода функции. 
Начало верно. Затем просто нужно выполнить команду git clone <ssh ссылка полученая на github>  Все после этого вы получили у себя на компьютере копию репозитория. 
    2. создание репозитория локально.
Для создания нового репозитория, пишем команду < git init >   (только если это происходит впервые). - Правильно!
Команду < git clone > выполняют для создания копии (клонирования) удаленного репозитория. - Не нужно ничего клонировать вы создаете репозиторий локально.

Команда - < git add > – делает все файлы отслеживаемыми. - Верно!

"Так же нужно сгенерировать публичный и приватный ключ:<  cat ~/.ssh/id_rsa.pub. >
Если приватный ключ был украден, нужно сгенерировать новый: <  ssh-keygen -t rsa. > "  - Это тоже тут лишние, вы  уже сделали когда собирались клонировать на пункте 1.
Нужно сделать локально git commit -m "same text" 
Далее связать репозиторий гит со своим, для этого - 
    git remote add origin git@github.com:ВАШ ЛОГИН На GITHUB/ИМЯ пустого репозитория.git
	git branch -M main
	git push -u origin main

    2. 

              Выгрузка файла на сервис:
             < wget URL_   +полная ссылка файла.> -  https://www.opennet.ru/man.shtml?topic=wget&russian=0&category=&submit=%F0%CF%CB%C1%DA%C1%D4%D8+man
< git clone _  ссылка на репозиторий. >  Смотри выше.
< scp app.zip user@ server:/srv/apps  - выгрузить с компьютера.>  - https://www.opennet.ru/man.shtml?topic=scp+&russian=0&category=&submit=%F0%CF%CB%C1%DA%C1%D4%D8+man
 ТУТ все смешали в кучу. Это все несколько из другой оперы 

   3.

Что-бы получить на локальный компьютер изменения нужно ввести команду- < git clone>  - Зачем если вы уже склонировали.
, а потом  - < git  pull > . - Достаточно этого

   4.
   
< git status > - отображает состояние рабочего каталога и раздела проиндексированных файлов. 
Так же выводит список проиндексированных и неотслеживаемых файлов, а также файлов, удаленных из индекса Git.

< git log >  – является основным инструментом Git для изучения истории репозитория. Выводит полную историю коммитов в стандартном формате. Если выходные данные занимают более одного экрана. (С помощью < git status  > можно просматривать рабочий каталог и раздел проиндексированных файлов, в то время как < git log > показывает только историю коммитов.)

< git remote >  – способствует  удалению  ссылок— эти ссылки (указатели) в  удаленных репозиториях, включая ветки, теги и так далее. Тем не менее, более распространенным способом является использование веток слежения. Простой способ передать URL-адрес для обмена информацией. 
